/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Apppackage;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.security.SecureRandom;
import java.math.BigInteger;

/**
 *
 * @author M r sinha
 */
public class AfterLogin extends javax.swing.JFrame {

    private Connection con;
    private Statement st,st1,st2,st3,st4,st5;
    private ResultSet rs,rs1,rs2,rs3,rs4,rs5,rs6;
    static String use[]=new String[2];
    /**
     * Creates new form AfterLogin
     */
    public AfterLogin() {
        initComponents();
        try{
            DbConnect connect = new DbConnect();
            //Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/projectdb2?"+ "user=root&password=nevergiveup");
            st = con.createStatement();
            st1 = con.createStatement();
            st2 = con.createStatement();
            st3 = con.createStatement();
            st4=con.createStatement();
            st5=con.createStatement();
        }
        catch(Exception ex){
            System.out.println(ex+"Can not connect");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        ac1 = new javax.swing.JTextField();
        ac2 = new javax.swing.JTextField();
        ac3 = new javax.swing.JTextField();
        sl1 = new javax.swing.JTextField();
        sl2 = new javax.swing.JTextField();
        to_st = new javax.swing.JTextField();
        from_st = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        train_no = new javax.swing.JTextField();
        cost_res = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        pnr_res = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        loguse = new javax.swing.JLabel();
        logdate = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("From Station");

        jLabel2.setText("To Station");

        jLabel3.setText("AC 1 seats");

        jLabel4.setText("AC 2 seats");

        jLabel5.setText(" AC 3 seats");

        jLabel7.setText(" Sleeper 1 seats");

        jLabel8.setText(" Sleeper 2 seats");

        ac1.setText("0");

        ac2.setText("0");

        ac3.setText("0");

        sl1.setText("0");

        sl2.setText("0");

        jLabel6.setText("Train Number");

        jLabel9.setText("Total Cost:");

        jLabel10.setText("Your PNR:");

        jButton1.setText("Book Ticket");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        logdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logdateActionPerformed(evt);
            }
        });

        jLabel11.setText("Date");

        jLabel12.setText("YYYYMMDD");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(ac1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(188, 188, 188)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ac3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(logdate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(from_st, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(to_st, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(train_no, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addContainerGap())))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sl1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ac2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sl2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(40, 40, 40)
                        .addComponent(jButton1)
                        .addGap(46, 46, 46))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loguse, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cost_res, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(pnr_res)
                    .addGap(149, 149, 149)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel11)))
                        .addGap(14, 14, 14))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(logdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(from_st))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(to_st, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(train_no, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ac1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(ac2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(ac3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sl1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sl2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cost_res, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(loguse, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(327, Short.MAX_VALUE)
                    .addComponent(pnr_res, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(138, 138, 138)))
        );

        jTabbedPane1.addTab("Book a Ticket", jPanel1);

        jLabel13.setText("PNR Number");

        jLabel14.setText("Train Number");

        jLabel15.setText("AC1 Seats");

        jTextField3.setText("0");

        jLabel16.setText("AC2 Seats");

        jTextField4.setText("0");

        jLabel17.setText("AC3 Seats");

        jTextField5.setText("0");

        jLabel18.setText("Sleeper1 Tickets");

        jTextField6.setText("0");

        jLabel19.setText("Sleeper2 Tickets");

        jTextField7.setText("0");

        jButton3.setText("Please delete the above tickets");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel20.setText("We'll refund you INR");

        jTextField8.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGap(75, 75, 75)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel15)
                                        .addComponent(jLabel17))
                                    .addGap(42, 42, 42)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                        .addComponent(jTextField3))
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addGap(62, 62, 62)
                                            .addComponent(jLabel16))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addComponent(jLabel18)))
                                    .addGap(48, 48, 48)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField4)
                                        .addComponent(jTextField6)))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel13)
                                                .addComponent(jLabel14))
                                            .addGap(57, 57, 57)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                                                .addComponent(jTextField1)))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addGap(20, 20, 20)
                                            .addComponent(jLabel20)
                                            .addGap(28, 28, 28)
                                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(0, 75, Short.MAX_VALUE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(jLabel19)
                                .addGap(50, 50, 50)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jButton3)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(43, 43, 43)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(64, 64, 64))
        );

        jTabbedPane1.addTab("Delete booked tickets here", jPanel3);

        jButton2.setText("LOGOUT!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(166, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(332, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Logout", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public final class SessionIdentifierGenerator {
  private final SecureRandom random = new SecureRandom();

  public String nextSessionId() {
    return new BigInteger(130, random).toString(32);
  }
}
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        loguse.setText(use[0]);
        String from=(String)from_st.getText();
        String to=(String)to_st.getText();
        String train=(String)train_no.getText();
        String ansdate=(String)logdate.getText();
        int stno1=0,stno2=0,ctr=0;
        int maxac1,maxac2,maxac3,maxsl1,maxsl2;
        int Ac1=Integer.parseInt((String)ac1.getText());
        int Ac2=Integer.parseInt((String)ac2.getText());
        int Ac3=Integer.parseInt((String)ac3.getText());
        int Sl1=Integer.parseInt((String)sl1.getText());
        int Sl2=Integer.parseInt((String)sl2.getText());
        float ans=0;
        try
        {
        String q="select * from train where trainno=\'"+train+"\'";
        String q2="select * from intermediate_stations where (stno=(select stno from station where stname=\'"+to+"\') and (trainno=\'"+train+"\'));";
        String q1="select * from intermediate_stations where (stno=(select stno from station where stname=\'"+from+"\') and trainno=\'"+train+"\' );"; 
         rs1=st1.executeQuery(q1);
          rs2=st2.executeQuery(q2);
          rs=st.executeQuery(q);
        if(rs.isBeforeFirst() && rs1.isBeforeFirst() && rs2.isBeforeFirst())
        {
            rs.next();
            maxac1=Integer.valueOf(rs.getString("ac1seats"));
           maxac2=Integer.valueOf(rs.getString("ac2seats"));
           maxac3=Integer.valueOf(rs.getString("ac3seats"));
           maxsl1=Integer.valueOf(rs.getString("sleeper1seats"));
           maxsl2=Integer.valueOf(rs.getString("sleeper2seats"));
         //  System.out.println(maxac1+maxac2+maxac3+maxsl1+maxsl2);
            if(rs1.next())
            {
            from=rs1.getString("stno");
            stno1=Integer.valueOf(from);
            }

            if(rs2.next())
            {
            to=rs2.getString("stno");
            stno2=Integer.valueOf(to);
            }
            String q3="select * from distance where stno1 =\'"+from+"\'and stno2=\'"+to+"\';";
            rs=st.executeQuery(q3);
            if(!rs.next())
            {
            q3="select * from distance where stno1 =\'"+to+"\'and stno2=\'"+from+"\';";
            rs=st.executeQuery(q3);
            }
            
            rs.beforeFirst();
            if(rs.next())
            {
            
            String q4  = "select * from fares where trainno =\'" + train +"\';";
            rs3=st3.executeQuery(q4);
           
            
            if(rs3.isBeforeFirst())
                       {
                       while(rs3.next())
                       {
                           String q6=rs3.getString("class");
                           if(q6.equals("ac1seats") )
                           {
                             String q7=rs3.getString("price");
                             float temp=Float.valueOf(q7);
                             ans=ans+Ac1*temp; 
                           }
                           if(q6.equals("ac2seats") )
                           {
                             String q7=rs3.getString("price");
                             float temp=Float.valueOf(q7);
                             ans=ans+Ac2*temp; 
                           }
                           if(q6.equals("ac3seats") )
                           {
                             String q7=rs3.getString("price");
                             float temp=Float.valueOf(q7);
                             ans=ans+Ac3*temp; 
                           }
                           if(q6.equals("sleeper1seats") )
                           {
                             String q7=rs3.getString("price");
                             float temp=Float.valueOf(q7);
                             ans=ans+Sl1*temp; 
                           }
                           if(q6.equals("sleeper2seats") )
                           {
                             String q7=rs3.getString("price");
                             float temp=Float.valueOf(q7);
                             ans=ans+Sl2*temp; 
                           }

                       }
                         String q9="select count(*) as t from ticket;";
                         rs4=st4.executeQuery(q9);
                            String ans1,pnrtrial="";
                            ans1 = String.valueOf(ans);
                            int ansfare=(int)ans;
                              cost_res.setText(ans1);
                              SessionIdentifierGenerator sg=new SessionIdentifierGenerator();
                              if(rs4.next())
                              {
                             pnrtrial= sg.nextSessionId();
                             pnrtrial=pnrtrial.substring(0,7);
                             pnrtrial=pnrtrial+rs4.getString("t");
                             pnrtrial=pnrtrial.toUpperCase();
                              }
                             pnr_res.setText(pnrtrial);
             String anstime="select departuretime from schedule where trainno=\'"+ train +"\' and stno=\'"+ from +"\';";
             rs4=st4.executeQuery(anstime);
             if(rs4.next())
             anstime=rs4.getString("departuretime");
                             System.out.println(pnrtrial+" "+use[1]+" "+train+" "+from+" "+to+" "+ansfare+" "+ansdate+" "+anstime);
                              String q8 =" insert into ticket (pnr, uid, trainno, src_u, des_u, totalfare, depart_date, depart_time) values (\'" + pnrtrial  +"\'," + use[1] + ",\'" + train + "\', \'" + from +"\', \'" + to + "\', \'" + ansfare +"\', \'" + ansdate+"\',\'"+anstime+"\' );";
                             st1.executeUpdate(q8);
                             if(Ac1!=0)
                             {
                             int Ac11=Ac1;
                             q8="select sum(count) as my from seats_required where trainno=\'"+train+"\' and class='ac1seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr=0;
                             else
                                 ctr=Integer.valueOf(rs4.getString("my"));
                            int left=maxac1-ctr;
                            if(left>=Ac1)
                            {
                                while(Ac1>0)
                                {
                                String h="A"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'ac1seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Ac1--;
                                left--;
                                }
                            }
                            else
                            {
                                while(left>0)
                                {
                                 String h="A"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'ac1seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Ac1--;
                                left--;
                                }
                                while(Ac1>0)
                                {
                                 int ctr1;
                                q8="select max(waitno) as my from seats_waiting where trainno=\'"+train+"\' and class='ac1seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr1=1;
                             else
                                 ctr1=Integer.valueOf(rs4.getString("my"))+1;
                             System.out.println(ctr1);
                                q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'ac1seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ctr1 +"\' );";
                 //               q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'ac1seats\',\'"+pnrtrial+"\',\'"+train+"\',\'"+ctr1+"\' );";
                                st1.executeUpdate(q8);
                                Ac1--;
                                left--;
                                }
                            }
                             q8="insert into seats_required (class,pnr,trainno,count) values ( \'ac1seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ Ac11 +"\' );";                             
                             st1.executeUpdate(q8);
                             }
                             
                             if(Ac2!=0)
                             {
                                 
                                 
                                 
                            int Ac21=Ac2;
                             q8="select sum(count) as my from seats_required where trainno=\'"+train+"\' and class='ac2seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr=0;
                             else
                                 ctr=Integer.valueOf(rs4.getString("my"));
                            int left=maxac2-ctr;
                            if(left>=Ac2)
                            {
                                while(Ac2>0)
                                {
                                String h="B"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'ac2seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Ac2--;
                                left--;
                                }
                            }
                            else
                            {
                                while(left>0)
                                {
                                 String h="B"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'ac2seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Ac2--;
                                left--;
                                }
                                while(Ac2>0)
                                {
                                 int ctr1;
                                q8="select max(waitno) as my from seats_waiting where trainno=\'"+train+"\' and class='ac2seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr1=1;
                             else
                                 ctr1=Integer.valueOf(rs4.getString("my"))+1;
                             System.out.println(ctr1);
                                q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'ac2seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ctr1 +"\' );";
                 //               q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'ac1seats\',\'"+pnrtrial+"\',\'"+train+"\',\'"+ctr1+"\' );";
                                st1.executeUpdate(q8);
                                Ac2--;
                                left--;
                                }
                            }
     
                                 
                                 
                                 
                             q8="insert into seats_required (class,pnr,trainno,count) values ( \'ac2seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ Ac21 +"\' );";
                             st1.executeUpdate(q8);
                             }
                             
                             if(Ac3!=0)
                             {
                                 
                                 
                             int Ac31=Ac3;
                             q8="select sum(count) as my from seats_required where trainno=\'"+train+"\' and class='ac3seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr=0;
                             else
                                 ctr=Integer.valueOf(rs4.getString("my"));
                            int left=maxac3-ctr;
                            if(left>=Ac3)
                            {
                                while(Ac3>0)
                                {
                                String h="C"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'ac3seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Ac3--;
                                left--;
                                }
                            }
                            else
                            {
                                while(left>0)
                                {
                                 String h="C"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'ac3seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Ac3--;
                                left--;
                                }
                                while(Ac3>0)
                                {
                                 int ctr1;
                                q8="select max(waitno) as my from seats_waiting where trainno=\'"+train+"\' and class='ac3seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr1=1;
                             else
                                 ctr1=Integer.valueOf(rs4.getString("my"))+1;
                             System.out.println(ctr1);
                                q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'ac3seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ctr1 +"\' );";
                 //               q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'ac1seats\',\'"+pnrtrial+"\',\'"+train+"\',\'"+ctr1+"\' );";
                                st1.executeUpdate(q8);
                                Ac3--;
                                left--;
                                }
                            }
                                 
                                 
                                 
                             q8="insert into seats_required (class,pnr,trainno,count) values ( \'ac3seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ Ac31 +"\' );";
                             st1.executeUpdate(q8);
                             }
                
                             if(Sl1!=0)
                             {
                                 
                                 
                            
                             int Sl11=Sl1;
                             q8="select sum(count) as my from seats_required where trainno=\'"+train+"\' and class='sleeper1seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr=0;
                             else
                                 ctr=Integer.valueOf(rs4.getString("my"));
                            int left=maxsl1-ctr;
                            if(left>=Sl1)
                            {
                                while(Sl1>0)
                                {
                                String h="D"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'sleeper1seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Sl1--;
                                left--;
                                }
                            }
                            else
                            {
                                while(left>0)
                                {
                                 String h="D"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'sleeper1seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Sl1--;
                                left--;
                                }
                                while(Sl1>0)
                                {
                                 int ctr1;
                                q8="select max(waitno) as my from seats_waiting where trainno=\'"+train+"\' and class='sleeper1seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr1=1;
                             else
                                 ctr1=Integer.valueOf(rs4.getString("my"))+1;
                             System.out.println(ctr1);
                                q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'sleeper1seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ctr1 +"\' );";
                 //               q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'ac1seats\',\'"+pnrtrial+"\',\'"+train+"\',\'"+ctr1+"\' );";
                                st1.executeUpdate(q8);
                                Sl1--;
                                left--;
                                }
                            }
                                 
                                 
                                 
                                 
                                 
                             q8="insert into seats_required (class,pnr,trainno,count) values ( \'sleeper1seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ Sl11 +"\' );";
                             st1.executeUpdate(q8);
                             }
                
                             if(Sl2!=0)
                             {
                                 
                            
                             int Sl21=Sl2;
                             q8="select sum(count) as my from seats_required where trainno=\'"+train+"\' and class='sleeper2seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr=0;
                             else
                                 ctr=Integer.valueOf(rs4.getString("my"));
                            int left=maxsl2-ctr;
                            if(left>=Sl2)
                            {
                                while(Sl2>0)
                                {
                                String h="E"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'sleeper2seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Sl2--;
                                left--;
                                }
                            }
                            else
                            {
                                while(left>0)
                                {
                                 String h="E"+left;
                                q8="insert into seats_confirmed (class,pnr,trainno,seats_no) values ( \'sleeper2seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+h +"\' );";                             
                             st1.executeUpdate(q8);
                                Sl2--;
                                left--;
                                }
                                while(Sl2>0)
                                {
                                 int ctr1;
                                q8="select max(waitno) as my from seats_waiting where trainno=\'"+train+"\' and class='sleeper2seats';";
                             rs4=st4.executeQuery(q8);
                             rs4.next();
                             if((rs4.getString("my"))==null)
                                 ctr1=1;
                             else
                                 ctr1=Integer.valueOf(rs4.getString("my"))+1;
                             System.out.println(ctr1);
                                q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'sleeper2seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ctr1 +"\' );";
                 //               q8="insert into seats_waiting (class,pnr,trainno,waitno) values ( \'ac1seats\',\'"+pnrtrial+"\',\'"+train+"\',\'"+ctr1+"\' );";
                                st1.executeUpdate(q8);
                                Sl2--;
                                left--;
                                }
                            }     
                                 
                                 
                                 
                             q8="insert into seats_required (class,pnr,trainno,count) values ( \'sleeper2seats\',\'"+pnrtrial +"\',\'"+train +"\',\'"+ Sl21 +"\' );";
                             st1.executeUpdate(q8);
                             }
                             
                             
                             
                       }
            
         //   cost_res.setText(rs.getString("dist"));
            }
            else
                cost_res.setText("ERROR : Start and End Points are Same!");
            
            
        }
        else
        {
            cost_res.setText("ERROR : Check Info");
        }
        }
        catch(Exception ex)
        {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    
    
    private void logdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_logdateActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String args[]=new String[2];
                StartGUI.main(args);
                dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        String train=(String)jTextField2.getText();
        String pnr=(String)jTextField1.getText();        
        int Ac1=Integer.parseInt((String)jTextField3.getText());
        int Ac2=Integer.parseInt((String)jTextField4.getText());
        int Ac3=Integer.parseInt((String)jTextField5.getText());
        int S1=Integer.parseInt((String)jTextField6.getText());
        int S2=Integer.parseInt((String)jTextField7.getText());
        float ans=0;
        
        try{
            String q = "select pnr from ticket where pnr=\'"+pnr+"\';";
            rs = st.executeQuery(q);
            if(!rs.next()){
                jTextField1.setText("Incorrect PNR number");
               
            }
        }
       catch(Exception ex){
           System.out.println(ex);
       }
       try{
            String q = "select trainno from train where trainno=\'"+train+"\';";
            rs = st.executeQuery(q);
            if(!rs.next()){
                jTextField2.setText("Incorrect Train number");
               
            }
        }
       catch(Exception ex){
           System.out.println(ex);
       }
       
       ///////////////////////////       
       try{
            String q4="";
            String q5 ="";
            int wcount=0,minwait=0; 
            q4 ="select count(*), min(waitno) from seats_waiting where class = \'ac1seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\';";
            q5 ="delete from seats_waiting where class = \'ac1seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\' limit " + Ac1 +" ;";
            
            rs4 = st.executeQuery(q4);       
            st2.executeUpdate(q5);                      
                      
            while(rs4.next()){                
                String count = rs4.getString("count(*)");
               wcount=Integer.parseInt(count);
                String w = rs4.getString("min(waitno)");
                minwait=Integer.parseInt(w);               
            }
            if(Ac1<wcount)
                wcount = Ac1;
            String depart_date="";
           
            q4 = "select * from ticket  where pnr=\'" + pnr + "\';";            
            rs4 = st2.executeQuery(q4);
            while(rs4.next()){                
               depart_date = rs4.getString("depart_date");                
            }
            depart_date = depart_date.replaceAll("\\D", "");
            minwait+=wcount-1;
            q4 = "update seats_waiting s, ticket set waitno = waitno-" +wcount+" where (waitno >" +minwait+") and (ticket.pnr =  s.pnr  and  depart_date = \'"+ depart_date+"\' and class=\'ac1seats\');";
            //System.out.println(q4);
            st.executeUpdate(q4);            
            
            q4 = "update seats_required set count = count-"+ wcount+" where class= \'ac1seats\' and trainno=\'"+train+"\' and pnr = \'"+pnr+"\';";
            //System.out.println(q4);
            st.executeUpdate(q4);
            
        }
        catch(Exception ex){
            System.out.println(ex+"error in ac1");
        }
       //////////////////////////////////
       ///////////////////////////       
       try{
            String q4="";
            String q5 ="";
            int wcount=0,minwait=0; 
            q4 ="select count(*), min(waitno) from seats_waiting where class = \'ac2seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\';";
            q5 ="delete from seats_waiting where class = \'ac2seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\' limit " + Ac2 +" ;";
            
            rs4 = st.executeQuery(q4);       
            st2.executeUpdate(q5);                      
                      
            while(rs4.next()){                
                String count = rs4.getString("count(*)");
               wcount=Integer.parseInt(count);
                String w = rs4.getString("min(waitno)");
                minwait=Integer.parseInt(w);               
            }
            if(Ac2<wcount)
                wcount = Ac2;
            String depart_date="";
           
            q4 = "select * from ticket  where pnr=\'" + pnr + "\';";            
            rs4 = st2.executeQuery(q4);
            while(rs4.next()){                
               depart_date = rs4.getString("depart_date");                
            }
            depart_date = depart_date.replaceAll("\\D", "");
            minwait+=wcount-1;
            q4 = "update seats_waiting s, ticket set waitno = waitno-" +wcount+" where (waitno >" +minwait+") and (ticket.pnr =  s.pnr  and  depart_date = \'"+ depart_date+"\' and class=\'ac2seats\');";
            //System.out.println(q4);
            st.executeUpdate(q4);            
            
            q4 = "update seats_required set count = count-"+ wcount+" where class= \'ac2seats\' and trainno=\'"+train+"\' and pnr = \'"+pnr+"\';";
            //System.out.println(q4);
            st.executeUpdate(q4);
            
        }
        catch(Exception ex){
            System.out.println(ex+"error in ac2");
        }
       //////////////////////////////////
       
       ///////////////////////////       
       try{
            String q4="";
            String q5 ="";
            int wcount=0,minwait=0; 
            q4 ="select count(*), min(waitno) from seats_waiting where class = \'ac3seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\';";
            q5 ="delete from seats_waiting where class = \'ac3seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\' limit " + Ac3 +" ;";
            
            rs4 = st.executeQuery(q4);       
            st2.executeUpdate(q5);                      
                      
            while(rs4.next()){                
                String count = rs4.getString("count(*)");
               wcount=Integer.parseInt(count);
                String w = rs4.getString("min(waitno)");
                minwait=Integer.parseInt(w);               
            }
            if(Ac3<wcount)
                wcount = Ac3;
            String depart_date="";
           
            q4 = "select * from ticket  where pnr=\'" + pnr + "\';";            
            rs4 = st2.executeQuery(q4);
            while(rs4.next()){                
               depart_date = rs4.getString("depart_date");                
            }
            depart_date = depart_date.replaceAll("\\D", "");
            minwait+=wcount-1;
            q4 = "update seats_waiting s, ticket set waitno = waitno-" +wcount+" where (waitno >" +minwait+") and (ticket.pnr =  s.pnr  and  depart_date = \'"+ depart_date+"\' and class=\'ac3seats\');";
            //System.out.println(q4);
            st.executeUpdate(q4);            
            
            q4 = "update seats_required set count = count-"+ wcount+" where class= \'ac3seats\' and trainno=\'"+train+"\' and pnr = \'"+pnr+"\';";
            //System.out.println(q4);
            st.executeUpdate(q4);
            
        }
        catch(Exception ex){
            System.out.println(ex+"error in ac3");
        }
       //////////////////////////////////
       
       ///////////////////////////       
       try{
            String q4="";
            String q5 ="";
            int wcount=0,minwait=0; 
            q4 ="select count(*), min(waitno) from seats_waiting where class = \'sleeper1seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\';";
            q5 ="delete from seats_waiting where class = \'sleeper1seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\' limit " + S1 +" ;";
            
            rs4 = st.executeQuery(q4);       
            st2.executeUpdate(q5);                      
                      
            while(rs4.next()){                
                String count = rs4.getString("count(*)");
               wcount=Integer.parseInt(count);
                String w = rs4.getString("min(waitno)");
                minwait=Integer.parseInt(w);               
            }
            if(S1<wcount)
                wcount = S1;
            String depart_date="";
           
            q4 = "select * from ticket  where pnr=\'" + pnr + "\';";            
            rs4 = st2.executeQuery(q4);
            while(rs4.next()){                
               depart_date = rs4.getString("depart_date");                
            }
            depart_date = depart_date.replaceAll("\\D", "");
            minwait+=wcount-1;
            q4 = "update seats_waiting s, ticket set waitno = waitno-" +wcount+" where (waitno >" +minwait+") and (ticket.pnr =  s.pnr  and  depart_date = \'"+ depart_date+"\' and class=\'sleeper1seats\');";
            //System.out.println(q4);
            st.executeUpdate(q4);            
            
            q4 = "update seats_required set count = count-"+ wcount+" where class= \'sleeper1seats\' and trainno=\'"+train+"\' and pnr = \'"+pnr+"\';";
            //System.out.println(q4);
            st.executeUpdate(q4);
            
        }
        catch(Exception ex){
            System.out.println(ex+"error in s1");
        }
       //////////////////////////////////
       
       ///////////////////////////       
       try{
            String q4="";
            String q5 ="";
            int wcount=0,minwait=0; 
            q4 ="select count(*), min(waitno) from seats_waiting where class = \'sleeper2seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\';";
            q5 ="delete from seats_waiting where class = \'sleeper2seats\' and pnr=\'" + pnr + "\' and trainno =\'" + train +"\' limit " + S2 +" ;";
            
            rs4 = st.executeQuery(q4);       
            st2.executeUpdate(q5);                      
                      
            while(rs4.next()){                
                String count = rs4.getString("count(*)");
               wcount=Integer.parseInt(count);
                String w = rs4.getString("min(waitno)");
                minwait=Integer.parseInt(w);               
            }
            if(S2<wcount)
                wcount = S2;
            String depart_date="";
           
            q4 = "select * from ticket  where pnr=\'" + pnr + "\';";            
            rs4 = st2.executeQuery(q4);
            while(rs4.next()){                
               depart_date = rs4.getString("depart_date");                
            }
            depart_date = depart_date.replaceAll("\\D", "");
            minwait+=wcount-1;
            q4 = "update seats_waiting s, ticket set waitno = waitno-" +wcount+" where (waitno >" +minwait+") and (ticket.pnr =  s.pnr  and  depart_date = \'"+ depart_date+"\' and class=\'sleeper2seats\');";
            //System.out.println(q4);
            st.executeUpdate(q4);            
            
            q4 = "update seats_required set count = count-"+ wcount+" where class= \'sleeper2seats\' and trainno=\'"+train+"\' and pnr = \'"+pnr+"\';";
            //System.out.println(q4);
            st.executeUpdate(q4);
            
        }
        catch(Exception ex){
            System.out.println(ex+"error in s2");
        }
       //////////////////////////////////
       
      
       
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AfterLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AfterLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AfterLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AfterLogin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       ////  System.out.println(args[0]);
         // System.out.println(args[1]);
        use[0]=args[0];
        use[1]=args[1];
      //  System.out.println(use[0]);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AfterLogin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ac1;
    private javax.swing.JTextField ac2;
    private javax.swing.JTextField ac3;
    private javax.swing.JTextField cost_res;
    private javax.swing.JTextField from_st;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField logdate;
    private javax.swing.JLabel loguse;
    private javax.swing.JTextField pnr_res;
    private javax.swing.JTextField sl1;
    private javax.swing.JTextField sl2;
    private javax.swing.JTextField to_st;
    private javax.swing.JTextField train_no;
    // End of variables declaration//GEN-END:variables

    private String toString(float ans) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
